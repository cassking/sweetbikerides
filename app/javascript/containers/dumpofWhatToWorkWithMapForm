import React from 'react';
import ReactMapboxGl, {ScaleControl,ZoomControl,RotationControl,Layer,Feature } from "react-mapbox-gl";
const accessToken = "pk.eyJ1IjoiY2Fzc2tpbmciLCJhIjoiY2plcnRzaDJiMDAxYzJ2bnZ0OGU3dnB3OSJ9.kUHTVfObT_1gNrIdQM6eIQ";
import mapboxgl from 'mapbox-gl'

const style= "mapbox://styles/mapbox/outdoors-v10"
const Map = ReactMapboxGl({
  accessToken
});

const containerStyle = {
  height: '70vh',
  width: '70vw'
};
const center = [-75.163685, 39.952345]
const lineLayout = {
  'line-cap': 'round',
  'line-join': 'round'
};

const linePaint = {
  'line-color': '#4790E5',
  'line-width': 12
};
let map = Map
class MapInFormContainer extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lng: -75.163685,
      lat: 39.952345,
      center: center, // starting position
      zoomLevel: 12,
      start:[],
      end: [],
      route:[],
      map_start_latitude:0,
      map_start_longitude:0,
      map_start_latitude:0,
      map_end_latitude:0,
      route_reviews:{}
    }
    this.getRoute=this.getRoute.bind(this)
    this.createRoute=this.createRoute.bind(this)
    this.addRoute=this.addRoute.bind(this)
    this.getCoordinatesOnClick=this.getCoordinatesOnClick.bind(this)
  }

  getRoute() {
  //   let start = [this.state.map_start_longitude,this.state.map_start_latitude]
  //   let end = [this.state.map_end_longitude,this.state.map_end_latitude]
  //   let directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?geometries=geojson&access_token=' + mapboxgl.accessToken;
  // ({
  //     method: 'GET',
  //     url: directionsRequest,
  //   }).done(function(data) {
  //     var route = geojson.geometry.coordinates;
  //     map.addLayer({
  //       id: 'route',
  //       type: 'line',
  //       source: {
  //         type: 'geojson',
  //         data: {
  //           type: 'Feature',
  //           geometry: route
  //         }
  //       },
  //       paint: {
  //         'line-width': 2
  //       }
  //     });
  //   });
  }
  createRoute() {
    // let route = data.routes[0].geometry;
    // let start = [this.state.map_start_longitude,this.state.map_start_latitude]
    // let end = [this.state.map_end_longitude,this.state.map_end_latitude]
    // let startEndCoordinates=[start,end]
    // var geojson = {
    //       type: 'Feature',
    //       geometry: {
    //         type: 'Point',
    //         coordinates: startEndCoordinates
    //       }
    //     }
    // .setLngLat(geojson.geometry.coordinates)
    ///how to set
    }

  addRoute (payload) {
    // fetch('/api/v1/route_reviews', {
    //   credentials: 'same-origin',
    //   method: 'POST',
    //   body: JSON.stringify(payload),
    //   headers: { 'Content-Type': 'application/json' }
    // })
    // .then(response => {
    //   if (response.ok) {
    //     alert("map info added!")
    //     return response;
    //   } else {
    //     let errorMessage = `${response.status} (${response.statusText})`,
    //     error = new Error(errorMessage);
    //     throw(error);
    //   }
    // })
    // .then(response => response.json())
    // .then(body => {
    //   this.handleClearForm();
    //   this.setState({route_reviews}: this.state.route_reviews.concat(payload)})
    // })
    // .catch(error => console.error(`Error in fetch: ${error.message}`));
  }

  componentDidMount() {
      const { lng, lat, zoom } = this.state;
      mapboxgl.accessToken = accessToken;

      const map = new mapboxgl.Map({
        container: this.mapContainer,
        style: 'mapbox://styles/mapbox/streets-v9',
        center: [lng, lat],
        zoom
      });
      map.on('click', function (e) {
          document.getElementById('info').innerHTML =
          JSON.stringify(e.point) + '<br />' +
          JSON.stringify(e.lngLat);
      });
      map.on('click', () => {
        const { lng, lat } = map.getCenter();

        this.setState({
          lng: lng.toFixed(4),
          lat: lat.toFixed(4),
          zoom: map.getZoom().toFixed(2)
        });
      });

    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true
    }));

    map.addControl(new MapboxDirections({
      accessToken: accessToken
      }), 'top-left');

       // getRoute();
       // createRoute();
       // addRoute();
       //
    }//end componentDidMount
getCoordinatesOnClick(map, e){
  document.getElementById('info').innerHTML =
  JSON.stringify(e.lngLat["lat"]) + '<br />' +
  JSON.stringify(e.lngLat["lng"]);
}

  render() {
    const { lng, lat, zoom } = this.state;
    const dStyle = {
      position: 'relative',
      width: '400px',
      height: '400px'
    };
    return (
      <div>
        <pre id='info'></pre>
      {/* <Map
        onClick={this.getCoordinatesOnClick}
        // onMouseOver={this.getCoordinatesOnClick}
        zoomLevel={this.state.zoomLevel}
        style={style}
        showsUserLocation={true}
        userLocationVisible={true}
        containerStyle={containerStyle }
        center={this.state.center}>
      <Layer  type="line" layout={lineLayout} paint={linePaint}>
        <Feature coordinates={this.state.mappedRoute}  />
      </Layer>
</Map> */}
         <span>{`Longitude: ${lng} Latitude: ${lat} Zoom: ${zoom}`}</span>

      <div ref={el => this.mapContainer = el}  /></div>


    );
  }
}
export default MapInFormContainer;
